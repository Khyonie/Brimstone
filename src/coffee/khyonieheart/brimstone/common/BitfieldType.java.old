package coffee.khyonieheart.brimstone.common;

import java.util.List;

import org.bukkit.command.CommandSender;

import coffee.khyonieheart.hyacinth.util.marker.NotNull;
import coffee.khyonieheart.tidal.ArgumentType;
import coffee.khyonieheart.tidal.CommandExecutionIssue;

public class BitfieldType
{
	public static ArgumentType<Byte> bitByte()
	{
		return new ArgumentType<>(Byte.TYPE)
		{
			@Override
			public CommandExecutionIssue validateExecution(CommandSender sender, String argument, int index, String label, String... args) 
			{
				try {
					if (Short.parseShort(argument, 2) > 0x00FF)
					{
						CommandExecutionIssue issue = new CommandExecutionIssue("Range out of bounds for 8 bit signed byte.", index);
						return issue;
					}
					return null;
				} catch (NumberFormatException e) {
					CommandExecutionIssue issue = new CommandExecutionIssue("Cannot compute \"" + argument + "\" as a signed 8-bit binary integer.", index);

					// Attempt to parse number as radix 10 and 16 to provide a suggestion
					try {
						short s = Short.parseShort(argument, 10);
						
						try {
							s = Short.parseShort(argument, 16);
							issue.addPossibleFix("Convert argument from hexadecimal to binary as \"" + Integer.toBinaryString(s) + "\"");
						} catch (NumberFormatException e3) {
							issue.addPossibleFix("Convert argument from decimal to binary as \"" + Integer.toBinaryString(s) + "\"");
						}
					} catch (NumberFormatException e2) {}

					return issue;
				}
			}

			@Override
			public CommandExecutionIssue validateTabcomplete(CommandSender sender, String argument, int index, String label, String... args) 
			{
				try {
					if (Short.parseShort(argument, 2) > 0x0FF)
					{
						return new CommandExecutionIssue("Range beyond maximum of 11111111", index);
					}
					return null;
				} catch (NumberFormatException e) {
					return new CommandExecutionIssue("Invalid 8-bit binary number \"" + argument + "\"", index);
				}
			}

			@Override
			protected List<String> getCompletions() 
			{
				return null;
			}

			@Override
			protected Byte toType(String arg) 
			{
				return parseBase2Byte(arg);
			}
		};
	}

	private static byte parseBase2Byte(
		@NotNull String input
	)
		throws NumberFormatException
	{
		byte b = 0;

		if (input.startsWith("%"))
		{
			input = input.substring(1);
		}

		if (input.startsWith("0b"))
		{
			input = input.substring(2);
		}

		for (int i = 0; i < Math.min(input.length(), 8); i++)
		{
			switch (input.charAt(i))
			{
				case '1' -> b |= 1 << i;
				case '0' -> { }
				default -> throw new NumberFormatException("Invalid binary digit \"" + input.charAt(1) + "\"");
			}
		}

		return b;
	}
}
